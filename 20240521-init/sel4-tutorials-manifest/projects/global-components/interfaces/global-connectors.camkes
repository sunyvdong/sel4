/*
 * Copyright 2017, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */
/**
 * @file
 *
 * This file defines a list of connectors. A connection is an instance of a
 * connector, allowing two components to communicate with each other.
 * Different connectors are used for different purposes.
 *
 * In essence, a connector defines how exactly a component connects to another
 * component. There are two parts, from and to. Most of the connectors are
 * defined such that the "from" component sends data to the "to" component. So
 * the "from" component is more like a sender and the "to" component is like a
 * receiver. Having said that, a totally different semantic can be implemented.
 * It's really up to the programmer to decide it.
 *
 * To use the connector, you define it like this:
 *
 *    connection RPC util_fatfs_FS(from util.fs, to fatfs.fs);
 *
 * where the util_fatfs_FS connection is an instance of the RPC connector. It
 * connects util.fs interface to fatfs.fs interface.
 */

/**
 * RPCCallSignal connector
 *
 * This connector is like the regular RPCCall connector, except that
 * there is a Notification endpoint allocated and associated with the 
 * connector. The Notification endpoint is a 1-to-n relationship in that
 * a component connected to many other components on the same interface
 * with this connector is able to signal the connected components individually.
 *
 * It requires an attribute to define a badge for it to use and to couple
 * the RPC connector and the associated dataport. The badge can be any
 * unique number.
 * 	<from_component>.<from_interface>_attributes = "<badge>";
 *
 * The 'from' side of the connector can access the associated Notification
 * endpoint via this exposed function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * The 'to' side of the connector can signal the desired connected component
 * by passing the component's badge into the following function:
 *      void <interface_name>_emit(unsigned int badge);
 * There is also a function to query the largest badge of all the connected
 * components:
 *      int <interface_name>_largest_badge(void);
 */
connector seL4RPCCallSignal {
    from Procedures;
    to Procedure;
    attribute bool from_global_endpoint = True;
}

/**
 * RPCDataport connect
 *
 * This connect provides a regular RPCCall connector, except that
 * it allocates an additional shared dataport between each sender
 * and receiver. The intention being that each client can place
 * data directory into a buffer, and then use RPC as the control
 * interface.
 *
 * It requires an attribute to define a badge for it to use and to couple
 * the RPC connector and the associated dataport. The badge can be any
 * unique number.
 * 	<from_component>.<from_interface>_attributes = "<badge>";
 *
 * The 'from' side of the connector can access its dataport by
 * using a symbol named '<from_interface>_buf', which is just an
 * alias for the actual shared memory allocation.
 *
 * The 'to' side of the connection can get a specific dataport
 * with <from_interface>_buf(<badge>) and can enumerate badges
 * with <from_interface>_enumerate_badge(<badge_number>) and
 * <from_interface>_num_badges()
 */
connector seL4RPCDataport {
    from Procedures with 0 threads;
    to Procedure;

    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = RPCInterface,
        connector_access = \<lparr>
            access_from_to   = {DeleteDerived},
            access_to_from   = {Reply},
            access_from_from = {},
            access_to_to     = {},
            access_from_conn = {Reset, SyncSend, Call, Read, Write},
            access_to_conn   = {Reset, Receive, Read, Write}
        \<rparr> \<rparr>";
}

connector seL4RPCDataportNoThreads {
    from Procedures with 0 threads;
    to Procedure with 0 threads;
    attribute bool to_global_rpc_endpoint = True;
}


/**
 * RPCDataportSignal connector
 *
 * This connector is similar to the seL4RPCCallSignal connector, except
 * that this connector is built on top of the seL4RPCDataport connector.
 *
 * The features and requirements are similar to the seL4RPCDataport connector.
 *
 * Additionally, the 'from' side of the connector can access the associated Notification
 * endpoint via this exposed function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * The 'to' side of the connector can signal the desired connected component
 * by passing the component's badge into the following function:
 *      void <interface_name>_emit(unsigned int badge);
 * There is also a function to query the largest badge of all the connected
 * components:
 *      int <interface_name>_largest_badge(void);
 */
connector seL4RPCDataportSignal {
    from Procedures;
    to Procedure;
    attribute bool from_global_endpoint = True;
}

/**
 * seL4RPCOverMultiSharedData connector
 *
 * This connector is similar to seL4RPCCall but will use shared memory instead of
 * the IPC buffer to transfer data between components. It supports multiple clients
 * communicating with a single server. Each client has a separate shared memory region
 * with the server. The size of the shared memory region can be configured on a
 * per-client basis via setting ${client_instance}.${interface_name}_shmem_size.
 * The default shared memory size is 4096 bytes.
 * For a multi-threaded caller, subsequent calls to the interface will block until
 * the first call returns in order to preserve the integrity of the shared buffer.
 *
 */
connector seL4RPCOverMultiSharedData {
    from Procedures with 0 threads;
    to Procedure;
}

/**
 * seL4GlobalAsynch
 *
 * This is a 1-to-n global endpoint Event connector that makes the underlying
 * seL4 Notification endpoint capability available directly to the consuming
 * component.
 *
 * This Event connector does not provide the consumer with the
 * usual wait or callback interfaces, but only provides the following function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * Global endpoint connectors allows an Event interface to be coupled with
 * other interfaces in a component.  The interfaces coupled with
 * an Event will be able to access that Event's underlying Notification
 * endpoint capability.
 *
 * Coupling of interfaces occurs through matching attribute values. Each global
 * endpoint connection defines a "_global_endpoint" attribute for its associated
 * interfaces.  Those interfaces (within a component) whose "_global_endpoint"
 * attributes match are coupled.
 */
connector seL4GlobalAsynch {
    from Event with 0 threads;
    to Events with 0 threads;
    attribute bool to_global_endpoint = True;

    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = EventInterface,
        connector_access = \<lparr>
            access_from_to   = {},
            access_to_from   = {},
            access_from_from = {},
            access_to_to     = {},
            access_from_conn = {Reset, Receive, Notify},
            access_to_conn   = {Reset, Receive, Notify}
        \<rparr> \<rparr>";
}

/**
 * seL4GlobalAsynchCallback
 *
 * This is a 1-to-n global endpoint Event connector that makes the underlying
 * seL4 Notification endpoint capability available directly to the consuming
 * component.
 *
 * This Event connector provides the consumer with the usual callback
 * interface as well as the following function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * Global endpoint connectors allow an Event interface to be coupled with
 * other interfaces in a component.  The interfaces coupled with
 * an Event will be able to access that Event's underlying Notification
 * endpoint capability.
 *
 * Coupling of interfaces occurs through matching attribute values. Each global
 * endpoint connection defines a "_global_endpoint" attribute for its associated
 * interfaces.  Those interfaces (within a component) whose "_global_endpoint"
 * attributes match are coupled.
 */
connector seL4GlobalAsynchCallback {
    from Event;
    to Events;
    attribute bool to_global_endpoint = True;

    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = EventInterface,
        connector_access = \<lparr>
            access_from_to   = {},
            access_to_from   = {},
            access_from_from = {},
            access_to_to     = {},
            access_from_conn = {Reset, Receive, Notify},
            access_to_conn   = {Reset, Receive, Notify}
        \<rparr> \<rparr>";
}

/* Custom connectors which use existing global connectors just with no threads configured. */
connector seL4TimeServer {
    from Procedures with 0 threads;
    to Procedure;
    attribute bool from_global_endpoint = True;

    /* TODO: double check this */
    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = RPCInterface,
        connector_access = \<lparr>
            access_from_to   = {DeleteDerived},
            access_to_from   = {Reset, Notify, Reply},
            access_from_from = {Reply}, \<comment> \<open>Fictitious but required by Access (Jira VER-1108)\<close>
            access_to_to     = {},
            access_from_conn = {Reset, Call, SyncSend, Notify, Receive},
            access_to_conn   = {Reset, Notify, Receive}
        \<rparr> \<rparr>";
}

connector seL4SerialServer {
    from Procedures with 0 threads;
    to Procedure;
    attribute bool from_global_endpoint = True;

    /* TODO: double check this */
    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = RPCInterface,
        connector_access = \<lparr>
            access_from_to   = {DeleteDerived},
            access_to_from   = {Reply,
                                \<comment> \<open>FIXME: vm_serial_server seems to need these, but why?\<close>
                                Reset, Notify},
            access_from_from = {},
            access_to_to     = {},
            access_from_conn = {Reset, Call, SyncSend, Read, Write},
            access_to_conn   = {Reset, Receive, Read, Write}
        \<rparr> \<rparr>";
}

connector seL4PicoServerSignal {
    from Procedures with 0 threads;
    to Procedure with 0 threads;
    attribute bool from_global_endpoint = True;
    attribute bool to_global_rpc_endpoint = True;
}

connector seL4PicoServer {
    from Procedures with 0 threads;
    to Procedure with 0 threads;
    attribute bool to_global_rpc_endpoint = True;
}

/**
 * seL4Ethdriver
 * 
 * This connector is intended to be used with the Ethdriver component.
 *
 * The connector itself is very similar to the seL4RPCDataportSignal connector
 * except that it contains an additional function to query a client's assigned MAC
 * address.
 */ 
connector seL4Ethdriver {
    from Procedures with 0 threads;
    to Procedure;
    attribute bool from_global_endpoint = True;
}

connector seL4SharedDataWithCaps {
    from Dataports;
    to Dataports;

    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = DataportInterface,
        connector_access = \<lparr>
            access_from_to   = {Reset, Notify},
            access_to_from   = {},
            access_from_from = {},
            access_to_to     = {},
            access_from_conn = {Read, Write},
            access_to_conn   = {Read, Write}
        \<rparr> \<rparr>";
}

/**
* seL4VirtQueues
*
* This is an n-n global endpoint connector that makes use of an seL4
* Notification endpoint capability and shared memory region to faciliate
* the implementation of a virtqueue-based communication protocol.
*
* Multiple components can participate in a virtqueue connection where
* participating components are in the 'from' end of the connection.
* A virtqueue connection can have only 1 component in the 'to' end, which
* is intended to be an empty/stub component.
*/
connector seL4VirtQueues {
    from Procedures with 0 threads;
    to Procedure with 0 threads;
    attribute bool disable_interface_type_checking = true;
    attribute bool from_global_endpoint = True;
    attribute bool to_global_endpoint = True;

    attribute string isabelle_connector_spec = "\<lparr>
        connector_type = NativeConnector,
        connector_interface = RPCInterface,
        connector_access = \<lparr>
            access_from_to   = {},
            access_to_from   = {},
            access_from_from = {Notify, Reset}, \<comment> \<open>global-endpoint ntfns are owned by clients\<close>
            access_to_to     = {},
            access_from_conn = {Reset, Receive, Notify, Read, Write},
            access_to_conn   = {Reset, Receive, Notify, Read, Write}
        \<rparr> \<rparr>";
}

/** seL4MessageQueue
 * 
 * This connector allows the passing of small messages from a sender to a
 * receiver. The passing of messages is non-blocking and a number of these
 * messages can be queued for the receiver.
 *
 * The block size of the messages is determined by the type associated with the
 * dataport.
 *
 * The sender should be located on the 'from' side of the connection and the
 * receivers on the 'to' side.
 *
 * The size of the queue can be set by the following attribute:
 *  <connection_name>.size = "<size>";
 * which is similar to seL4SharedDataport.
 *
 * Similarly, the length of the queue can be set by the following attribute:
 *  <connection_name>.length = "<length>";
 *
 * To differentiate between the individual seL4MessageQueue connections in a
 * component, an unique ID needs to be set for each connection. This can be
 * done by setting the following attribute:
 *  <component_name>.<interface_name>_id = "<unique id>";
 *
 * To interact with the message queue, use the message queue APIs in
 * libsel4camkes. The library provides two functions to obtain a handle to use
 * the APIs with:
 *  int camkes_msgqueue_sender_init(int msgqueue_id, camkes_msgqueue_sender_t *sender);
 *  int camkes_msgqueue_receiver_init(int msgqueue_id, camkes_msgqueue_receiver_t *receiver);
 * which initialises either a sender or receiver msgqueue channel. The
 * 'msgqueue_id' corresponds to the IDs that were assigned to a component's
 * seL4MessageQueue connections.
 */
connector seL4MessageQueue {
    from Dataports;
    to Dataports;
}

/** seL4GlobalAsynchHardwareInterrupt
 *
 * This connector is similar to the seL4HardwareInterrupt and has the same attributes for
 * specifying an IRQ to allocate but doesn't allocate any threads. In order to process
 * callback handlers for a received notification, a function provided by libsel4camkes,
 * camkes_handle_global_endpoint_irq(), can be called.
 *
 */
connector seL4GlobalAsynchHardwareInterrupt {
    from hardware Event;
    to Event with 0 threads;
    attribute bool to_global_endpoint = True;
}

/** seL4RPCNoThreads
 *
 * This connector is similar to the seL4RPCCall connector for performing RPC using the
 * seL4 IPC buffer. In order to process messages, an interface function needs to be
 * called to handle each received message.
 *
 * This makes it possible to tie several different interfaces to the same underlying
 * endpoint object.
 */
connector seL4RPCNoThreads {
    from Procedures with 0 threads;
    to Procedure with 0 threads;
    attribute bool to_global_rpc_endpoint = True;
}

connector seL4DTBHardwareThreadless {
    from Event with 0 threads;
    to Events with 0 threads;
    attribute bool to_global_endpoint = True;

}

connector seL4DTBHWThreadless {
    from hardware Event;
    to Events with 0 threads;
    attribute bool to_global_endpoint = True;

}

/** seL4GPIOServer
 *
 * This connector is intended for the exclusive use for GPIOMUXServer.
 * The connector is essentially the seL4RPCCall connector but with access
 * control mechanisms for GPIO pins. The user is able to assign specific
 * pins for clients to be used exclusively.
 *
 * This is done by filling out the following configuration item in the
 * configuration block of a .camkes configuration.
 *
 * <component name>.<interface name>_pins = gpio({ "pins" : ["PINS", ...] });
 *
 * <interface name> should be the name of the interface of the component that
 * is connected to the GPIOMUXServer with the seL4GPIOServer connector.
 */
connector seL4GPIOServer {
    from Procedures with 0 threads;
    to Procedure;
}
